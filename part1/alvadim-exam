1. Deploy a pod named nginx-pod using the nginx:alpine image.
Name: nginx-pod-yourname
Image: nginx:alpine
	
	answer:  kubectl run nginx-pod-alvadim --image=nginx:alpine

2. Deploy a messaging pod using the redis:alpine image with the labels set to tier=msg.
Pod Name: messaging
Image: redis:alpine
Labels: tier=msg

  answer:  kubectl run messaging --image=redis:alpine -l tier=msg 

3. Create a namespace named apx-x998-yourname

	answer:  kubectl create ns apx-x998-alvadim 

4. Get the list of nodes in JSON format and store it in a file at /tmp/nodes-yourname

	answer:  kubectl get nodes -o json > /tmp/nodes-alvadim

5. Create a service messaging-service to expose the messaging application within the
cluster on port 6379.
a. Use imperative commands - kubectl
b. Service: messaging-service
c. Port: 6379
d. Type: ClusterIp
e. Use the right 

 answer:
	
	kubectl create service clusterip messaging-service --tcp=6379:6379
  kubectl label service messaging-service tier=msg

6. Create a service messaging-service to expose the messaging application within the
cluster on port 6379.
a. Service: messaging-service
b. Port: 6379
c. Type: ClusterIp
d. Use the right labels

	answer:  q6.yaml

7. Create a deployment named hr-web-app using the image kodekloud/webapp-color
with 2 replicas
a. Name: hr-web-app
b. Image: kodekloud/webapp-color
c. Replicas: 2

	answer:  kubectl create deployment hr-web-app --image=kodekloud/webapp-color --replicas=2


######
8. Create a static pod named static-busybox on the master node that uses the busybox
image and the command sleep 1000
a. Name: static-busybox
b. Image: busybox

answer:  minikube ssh
    1- kubectl run static-busybox --image=busybox --dry-run=client -o yaml > static-busybox.yaml
    2- add command sleep 1000 to static-busybox.yaml
    3- cp static-busybox.yaml /etc/kubernetes/manifests
    see static-busybox.yaml


9. Create a POD in the finance-yourname namespace named temp-bus with the image
redis:alpine
a. Name: temp-bus
b. Image Name: redis:alpine

 answer:    kubectl create ns finance-alvadim
            kubectl run temp-bus --image=redis:alpine --namespace=finance-alvadim
       also q9.yaml

10. Create a Persistent Volume with the given specification
a. Volume Name: pv-analytics
b. Storage: 100Mi
c. Access modes: ReadWriteMany
d. Host Path: /pv/data-analytics

answer: 	q10.yaml

11. Create a Pod called redis-storage-yourname with image: redis:alpine with a Volume
of type emptyDir that lasts for the life of the Pod. specs:.
a. Pod named 'redis-storage-yourname'
b. Pod 'redis-storage-yourname' uses Volume type of emptyDir
c. Pod 'redis-storage-yourname' uses volumeMount with mountPath =
/data/redis

  answer:  q11.yaml

12. Create this pod and attached it a persistent volume called pv-1
a. Make sure the PV mountPath is hostbase : /data

	answer:  pvolume.yaml  q12pv.yaml 

13. Create a new deployment called nginx-deploy, with image nginx:1.16 and 1 replica.
Record the version. Next upgrade the deployment to version 1.17 using rolling
update. Make sure that the version upgrade is recorded in the resource annotation.
a. Deployment : nginx-deploy. Image: nginx:1.16
b. Image: nginx:1.16
c. Task: Upgrade the version of the deployment to 1:17
d. Task: Record the changes for the image upgrade

    answer:

	   kubectl create deployment nginx-deploy --image=nginx:1.16 --replicas=1
     kubectl describe po | grep image
     kubectl set image deployment nginx-deploy nginx=nginx:1.17 --record=true

       - Normal  Pulling    106s  kubelet            Pulling image "nginx:1.17"
       - Normal  Pulled     78s   kubelet            Successfully pulled image "nginx:1.17" in          28.394390912s

     kubectl rollout status deployment/nginx-deploy
     kubectl edit deploy nginx-deploy

    annotations:
    deployment.kubernetes.io/revision: "2"
    kubernetes.io/change-cause: kubectl1.25.4 set image deployment nginx-deploy nginx=nginx:1.17

14. Create an nginx pod called nginx-resolver using image nginx, expose it internally
with a service called nginx-resolver-service. Test that you are able to look up the
service and pod names from within the cluster. Use the image: busybox:1.28 for dns
lookup. Record results in /root/nginx-yourname.svc and /root/nginx-yourname.pod
# Test for question 14: curl http://nginx-resolver-service.default.svc 

	q14pod.yaml
  q14svc.yaml

    kubectl exec -ti nginx-resolver -- /bin/bash
    apt-get update
    apt-get install -y busybox
    busybox nslookup nginx-resolver-service.default.svc.cluster.local 
              > /root/nginx-yourname.svc 
             Server:	10.43.0.10
             Address:	10.43.0.10:53

             Name:	nginx-resolver-service.default.svc.cluster.local
             Address: 10.43.233.118

####
15. Create a static pod on node01 called nginx-critical with image nginx. Create this pod
on node01 and make sure that it is recreated/restarted automatically in case of a
failure.


     /etc/kubernetes/manifests/
cat <<EOF >/etc/kubernetes/manifests/static-web.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-critical
spec:
  containers:
    - name: nginx-critical
      image: nginx
      ports:
        - name: nginx-critical
          containerPort: 80
          protocol: TCP
EOF

  # place static-web.yaml to  /etc/kubernetes/manifests/ on node01
  kubectl apply -f static-web.yaml
  kubectl get po static-web.yaml -o wide 

16. Create a pod called multi-pod with two containers.
Container 1, name: alpha, image: nginx
Container 2: beta, image: busybox, command sleep 4800.
a. Environment Variables:
i.
container 1:
ii.
name: alpha
iii.
iv.
Container 2:
name: beta

	q16.yaml